name: PR Check - Fast Build

on:
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'app/**'
              - 'config/**'
              - 'database/**'
              - 'routes/**'
              - 'composer.json'
              - 'composer.lock'
              - 'artisan'
              - '.env.example'
            frontend:
              - 'resources/**'
              - 'package.json'
              - 'package-lock.json'
              - 'vite.config.ts'
              - 'tailwind.config.js'
              - 'tsconfig.json'
            docker:
              - 'Dockerfile'
              - 'docker/**'
              - 'fly/**'
              - '.dockerignore'

  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        if: needs.changes.outputs.backend == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: none

      - name: Setup Node
        if: needs.changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install PHP dependencies
        if: needs.changes.outputs.backend == 'true'
        run: composer install --no-interaction --prefer-dist --no-dev

      - name: Install Node dependencies
        if: needs.changes.outputs.frontend == 'true'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Run PHP linting
        if: needs.changes.outputs.backend == 'true'
        run: ./vendor/bin/pint --test

      - name: Run JavaScript linting
        if: needs.changes.outputs.frontend == 'true'
        run: npm run lint

      - name: Check code formatting
        if: needs.changes.outputs.frontend == 'true'
        run: npm run format:check

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: none
          extensions: pdo, pdo_mysql, redis

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Build assets
        run: npm run build

      - name: Run database migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Run tests
        run: |
          # Verify Pest is available
          if [ ! -f "./vendor/bin/pest" ]; then
            echo "Pest binary not found, checking installation..."
            ls -la vendor/bin/
            composer dump-autoload --optimize
          fi
          ./vendor/bin/pest --parallel --processes=4
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

  build-test:
    runs-on: ubuntu-latest
    needs: [changes, lint, test]
    if: always() && needs.changes.outputs.docker == 'true' && (needs.lint.result == 'success' || needs.lint.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert image name to lowercase
        run: |
          echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          tags: |
            type=ref,event=pr

      - name: Build Docker image (single platform for speed)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=pr-${{ github.event.number }}
            type=gha,scope=buildkit-linux/amd64
          cache-to: |
            type=gha,mode=max,scope=pr-${{ github.event.number }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test Docker image
        run: |
          # Pull the built image
          docker pull ${{ steps.meta.outputs.tags }}

          # Test that the image runs
          docker run --rm -d --name test-container -p 8080:8080 ${{ steps.meta.outputs.tags }}

          # Wait for container to start
          sleep 10

          # Basic health check
          timeout 30s bash -c 'until curl -f http://localhost:8080/health 2>/dev/null; do sleep 2; done' || echo "Health check failed, but continuing..."

          # Stop container
          docker stop test-container || true

  security-check:
    runs-on: ubuntu-latest
    needs: [changes, build-test]
    if: always() && needs.changes.outputs.docker == 'true' && needs.build-test.result == 'success'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Convert image name to lowercase
        run: |
          echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:pr-${{ github.event.number }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          timeout: '5m'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Comment PR with security scan results
        if: github.event_name == 'pull_request'
        run: |
          echo "🔒 Security scan completed for PR #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed vulnerability report" >> $GITHUB_STEP_SUMMARY

  summary:
    runs-on: ubuntu-latest
    needs: [changes, lint, test, build-test, security-check]
    if: always()
    steps:
      - name: PR Summary
        run: |
          echo "## 🚀 PR Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || needs.lint.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-test.result == 'success' && '✅ Passed' || needs.build-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-check.result == 'success' && '✅ Passed' || needs.security-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Performance Optimizations" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Single platform build (linux/amd64 only)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 Smart path filtering to skip unchanged code" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Parallel test execution" >> $GITHUB_STEP_SUMMARY
          echo "- 💾 Aggressive caching strategy" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Concurrent job execution" >> $GITHUB_STEP_SUMMARY
